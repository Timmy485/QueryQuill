import pandas as pd
import google.generativeai as palm
import os
from dotenv import load_dotenv
load_dotenv()
# Extract the API token from the configuration data
api_key = os.getenv('PALM_API_KEY')

def generate_direct_answer_with_palm(search_results, user_query, save_csv=True):
    """
    Generate a direct answer using the PaLM model from Google.

    Args:
        search_results (list): List of search results, typically from Elasticsearch.
        user_query (str): The user's query/question.
        save_csv (bool): Flag indicating if the results should be saved to a CSV.

    Returns:
        str: The answer generated by the PaLM model.
    """
    
    # Initialize the PaLM client using the provided API token
    palm.configure(api_key=api_key)
    model = "models/text-bison-001"

    passages = ''

    # If save_csv is True, read the questions and answers from a CSV and combine the passages
    if save_csv:
        df = pd.read_csv('../docs/questions_answers.csv', encoding='ISO-8859-1')
        passage_columns = [col for col in df.columns if "Passage" in col and "Metadata" not in col]
        combined_passages = df[passage_columns].apply(lambda row: ' '.join(row.dropna()), axis=1)
        passages = "".join(combined_passages)
    else:
        passages = [hit["_source"]["Passage"] for hit in search_results]

    # Create a prompt for the PALM model using the passages and user query
    prompt = f"""
        Use ONLY the following pieces of passages to answer the question at the end. 
        If you don't know the answer, just say that you don't know, don't try to make up an answer. 
        Use three sentences maximum and keep the answer as concise as possible. 
        Only answer from the passages
        Passages: {' '.join(passages)}
        Question: {user_query}
    """

    # Run the PaLM model with the generated prompt
    completion = palm.generate_text(
    model=model,
    prompt=prompt,
    temperature=0,
    )


    # Extract the generated answer from the model's output
    out = completion.result

    # If save_csv is True, save the generated answer to a CSV
    if save_csv:
        df['Generative AI Answer'] = out
        df.to_csv('../docs/questions_answers.csv', index=False)
    
    return out
